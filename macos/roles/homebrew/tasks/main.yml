---
# homebrew/tasks/main.yml

- name: Homebrew is Installed and Available
  block:
    - name: Attempt homebrew in check_mode (no changes)
      homebrew:
        update_homebrew: true
      check_mode: true

    - name: Homebrew Available
      debug:
        msg: Homebrew is installed

  rescue:
    - name: Homebrew Unavailable
      fail:
        msg: Homebrew is not installed

- name: Determine Homebrew ownership variables
  set_fact:
    homebrew_user: '{{ homebrew_user | default(ansible_user_id) }}'
    homebrew_group: '{{ homebrew_group | default(ansible_user_gid) }}'

- name: Perform brew installation.
  # Privilege escalation is only required for inner steps when
  # the `homebrew_user` doesn't match the `ansible_user_id`
  become: "{{ (homebrew_user != ansible_user_id) | bool }}"
  become_user: "{{ homebrew_user }}"
  block:
    - name: Where is the cache?
      command: "{{ homebrew_brew_bin_path }}/brew --cache"
      register: homebrew_cache_path
      changed_when: false
      check_mode: false

    # Tap.
    - name: Ensure configured taps are tapped.
      homebrew_tap:
        tap: '{{ item.name | default(item) }}'
        url: '{{ item.url | default(omit) }}'
        state: present
      loop: "{{ homebrew_taps }}"

    # Cask.
    - name: Ensure blacklisted cask applications are not installed.
      homebrew_cask:
        name: "{{ item }}"
        state: absent
        sudo_password: "{{ ansible_become_password | default(omit) }}"
      loop: "{{ homebrew_cask_uninstalled_apps }}"

    - name: Install configured cask applications.
      homebrew_cask:
        name: "{{ item.name | default(item) }}"
        state: present
        install_options: "{{ item.install_options | default('appdir=' + homebrew_cask_appdir) }}"
        accept_external_apps: "{{ homebrew_cask_accept_external_apps }}"
        sudo_password: "{{ ansible_become_password | default(omit) }}"
      loop: "{{ homebrew_cask_apps }}"
      notify:
        - Clear homebrew cache

    # Brew.
    - name: Ensure blacklisted homebrew packages are not installed.
      homebrew:
        name: "{{ item }}"
        state: absent
      loop: "{{ homebrew_uninstalled_packages }}"

    - name: Ensure configured homebrew packages are installed.
      homebrew:
        path: "{{ homebrew_brew_bin_path }}"
        name: "{{ item.name | default(item) }}"
        install_options: "{{ item.install_options | default(omit) }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ homebrew_installed_packages }}"
      notify:
        - Clear homebrew cache

    - name: Upgrade all homebrew packages (if configured).
      homebrew:
        update_homebrew: true
        upgrade_all: true
      when: homebrew_upgrade_all_packages
      notify:
        - Clear homebrew cache

    - name: Check for Brewfile.
      stat:
        path: "{{ homebrew_brewfile_dir }}/Brewfile"
      register: homebrew_brewfile
      check_mode: false

    - name: Install from Brewfile.
      command: "{{ homebrew_brew_bin_path }}/brew bundle chdir={{ homebrew_brewfile_dir }}"
      when: homebrew_brewfile.stat.exists and homebrew_use_brewfile

...
